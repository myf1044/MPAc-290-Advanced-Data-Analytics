# -*- coding: utf-8 -*-
"""MPAc290 1st session.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bGTSKsyVnVdT1WasGIK-e6agSWvLGsF_
"""



"""First Python codes"""

#try your first python code
print("Hello, Python")

import sys
print(sys.version)

"""Library

* Function
* Algorithm 
* Values
"""

printt("test")

"""build in function"""

print("Hello, Python!)

"""Python is called an interpreted language. On the other hand we have compiled languages."""

# Print string and error to see the running order

print("This will be printed")
frint("This will cause an error")
print("This will NOT be printed")

"""Python is an object oriented language in contrast we have functional languages as well.


<a align="center">
    <img src="https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%201/Images/TypesObjects.png" width="600">
</a
"""

"Arash"

"1 2 3 4"

type("Arash")

type(12)

type(12.3)

type(-1)

"""float64"""

import sys
sys.float_info

type(2)

float(2)

type(float(2))

type('1')

type(int('1'))

int('1 + 2')

int(1.2)

str(1)

type(True)

type(False)

int(True)

int(False)

bool(1)

type(6/2)

"""Expressions

operand
"""

1 + 2 + 34

1 == 1

1 != 2

5*5

5**5

6/2

type(6//2)

x = 43 + 12 +14

print(x)

x

2*x

y = 'Arash '

type(y)

12*y

x = 12

x = 23

x = 45

print(x)

z = 12*y

print(x)
print(y)
print(2*y)
print(z)

#indexing 

y[0]

y[-1]

y[-12]

y

z[-12]

len(z)

"""slicing"""

z[0:4]

z

z[12:34]

"""stride"""

z[12:34:2]

"""concatenate strings"""

x

u = z + x

u = z + str(x)
u

print("Arash teaches analytics")

#escape sequences
print("Arash teaches \n analytics")

"""try to write a code that prints out

'Arash teaches \n analytics'
"""

print("Arash teaches \t analytics")

print("Arash teaches \\ analytics")

y.upper()#methods

type(y)#functions

x = 12

x.upper()

A = "Arash is teaching the class"
B = A.replace("Arash", "He")
print(B)

A.find('is')

"""Tuples"""

tuple1 = ("Shannon", 10, 1.2)
tuple1

tuple1[0]

tuple1[0][2]

"""try indexing on tuples """

#lists

"""<img src="https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%202/Images/ListsIndex.png" width="1000" />"""

L = [1, 2, 3, 4]
L[2]

tuple1[2] =12

L[2] = 5

L[3] = (12, "Arash")

L

L.append(12)

print(L)
L.append((10, "Shannon"))
print(L)

L = [1, 2, 3, 4]

L = [1, 2, 3, 4]
print(L)
L.append([10, "Shannon"])
print(L)
len(L)

L = [1, 2, 3, 4]
print(L)
L.extend([10, "Shannon"])
print(L)
len(L)

L

print(L)
del(L[-1])
print(L)

x = "A,B,C,D"

type(x)

y = x.split(',')
type(y)

A = ["hard rock", 10, 1.2]
B = A  #copying A to B
print('A:', A)
print('B:', B)

print('B[0]:', B[0])
A[0] = "banana"
print('B[0]:', B[0])

"""<img src="https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%202/Images/ListsRef.png" width="1000" align="center">"""

B = A[:] #clone
B

A[0] = "test"
B

# Commented out IPython magic to ensure Python compatibility.
# %whos

"""namespace

Dictionary

<img src="https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%202/Images/DictsList.png" width="650" />
"""

Dict = {"key1": 1, "key2": "2", "key3": [3, 3, 3], "key4": (4, 4, 4), ('key5'): 5, (0, 1): 6}
Dict

Dict[(0, 1)]

# Commented out IPython magic to ensure Python compatibility.
# %whos

Dict.keys()

Dict.values()

type(Dict.values())

test_list = list(Dict.values())
print(type(test_list))
test_list

Dict['key1'] = 12

Dict

'key1' not in Dict

L

L[3]

"""Complexity

Set
"""

l = [1,2, 3, 4, 5 , 3, 4]
l

set(l)

l = {1,2, 3, 4, 5 , 3, 4}
l

list(set(l))

type(l)

l.add("test")
l

l.remove("test")
l

# Sample Sets

album_set1 = set(["Thriller", 'AC/DC', 'Back in Black'])
album_set2 = set([ "AC/DC", "Back in Black", "The Dark Side of the Moon"])

"""<img src="https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%202/Images/SetsSamples.png" width="650" />"""

album_set1, album_set2

# Find the intersections

intersection = album_set1 & album_set2
intersection

"""<img src="https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%202/Images/SetsLeft.png" width="650" />"""

# Find the difference in set1 but not set2

album_set1.difference(album_set2)

album_set2.difference(album_set1)

"""<img src = "https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%202/Images/SetsRight.png" width="650" />"""

# Use intersection method to find the intersection of album_list1 and album_list2

album_set1.intersection(album_set2)

# Find the union of two sets

album_set1.union(album_set2)

